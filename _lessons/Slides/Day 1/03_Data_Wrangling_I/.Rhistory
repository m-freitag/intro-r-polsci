datasummary_skim(parlgov_elec) %>% kableExtra::kable_styling(font_size = 17)
# Chunk 21
knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/master/rstats-artwork/dplyr_wrangling.png")
# Chunk 23
parlgov_elec_de <- parlgov_elec %>% # add, e.g., _de if we want to keep our original df
filter(country_name_short == "DEU")
# Chunk 25
parlgov_elec_de %>% # add, e.g., _de if we want to keep our original df
filter(party_name_short == "SPD", election_type == "parliament") %>%
pull(vote_share) %>%
mean()
# Chunk 26
parlgov_elec_de %>%
filter(party_name_short == "SPD", election_type == "parliament") %>%
summarise(mean(vote_share)) # summarise() takes summary functions such as mean(), sd(), etc.
# Chunk 27
parlgov_elec_de %>%
filter(party_name_short == "SPD", election_type == "parliament") %>%
summarise(mean = mean(vote_share), sd = sd(vote_share), n = n())
# Aside: you can also get the number of rows (in a group) by usining the base
# function nrow(.) with a placeholder in the above pipe.
# Chunk 28
parlgov_elec_de <- parlgov_elec_de %>% # here, we "overwrite" our df
mutate(year = lubridate::year(election_date))
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share)
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right)
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
arrange(left_right)
?arrange
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
desc(left_right) # defaul is ascending
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
arrange(left_right, desc()) # defaul is ascending
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
arrange(left_right, asc()) # defaul is ascending
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
arrange(desc(left_right)) # default is ascending
?desc
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
fig.align = "center",
fig.retina = 2,
cache = FALSE # , echo=F, warning=F, message=F
)
# knitr::opts_chunk$set(fig.dim=c(4.8, 4.5), fig.retina=2, out.width="100%")
# install package management tool pacman
# install.packages("pacman")
# devtools::install_github("CorrelAid/datenguideR")
pacman::p_load(
tidyverse,
data.table,
rio,
patchwork,
DT,
modelsummary,
collapse
)
# font_add_google(
#   name = "IBM Plex Sans",
#   family = "plex"
# )
# showtext_auto()
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE
)
# Chunk 2: set-ggplot-theme
theme_set(theme_classic() +
theme(
text = element_text(family = "plex", size = 25, colour = "#415564"),
panel.background = element_rect(fill = "#f6f3f2"),
plot.background = element_rect(fill = "#f6f3f2", color = "#f6f3f2"),
panel.grid.major = element_line(colour = "#e8e8e8"),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill = "#f6f3f2"),
legend.box.background = element_rect(fill = "#f6f3f2"),
axis.text = element_text(colour = "#415564"),
axis.line = element_line(colour = "#415564"),
axis.title = element_text(colour = "#415564"),
axis.ticks = element_line(colour = "#415564"),
))
purple <- "#644155"
# Chunk 3: xaringan-scribble
xaringanExtra::use_scribble(pen_color = purple)
# Chunk 4
knitr::include_graphics("Figs/tidyverse.png")
# Chunk 5
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr
# Chunk 6
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
as.data.frame(lotr)
# Chunk 7
as_tibble(lotr) # You don't have the data here.
# Hint: You can create one just like data frames but with tibble().
# Chunk 10
# Exporting/importing several data frames: export_list()/import_list()
# Make a list of two built-in data sets.
# tibble::lst() automatically names the elements:
df_list <- tibble::lst(mtcars, iris)
export_list(df_list, file = paste0(names(df_list), ".csv"))
# export_file takes a character vector; hence, we build one from the names of our element
# With the paste0() we paste ".csv" to every element of the character vector
# produced by names(df_list).
Z <- import_list(dir(pattern = "csv$"))
# import_file takes achr vector holding file paths/files.
# With dir() we get all names of the files that match a specific pattern (regular expression).
# In this case, all files that end with csv ($ matches the end of the string).[1]
# Chunk 12
"Ceci n&#37;est pas une pipe" %>% gsub("&#37;", "'", .) # gsub() performs replacement of all matches in a chr. vector.
# Chunk 14
Sys.setenv("_R_USE_PIPEBIND_" = "true")
"Ceci n&#37;est pas une pipe" |> . => gsub("&#37;", "'", .)
# Chunk 15
knitr::include_graphics("Figs/relational.svg")
# Chunk 16
parlgov_elec <- import("http://www.parlgov.org/static/data/development-cp1252/view_election.csv")
# Chunk 17
glimpse(parlgov_elec) # enhanced version of str()
# Chunk 18
datatable(head(parlgov_elec, 10),
width = "100%",
options = list(pageLength = 3, scrollX = TRUE)
)
# Chunk 20
datasummary_skim(parlgov_elec) %>% kableExtra::kable_styling(font_size = 17)
# Chunk 21
knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/master/rstats-artwork/dplyr_wrangling.png")
# Chunk 23
parlgov_elec_de <- parlgov_elec %>% # add, e.g., _de if we want to keep our original df
filter(country_name_short == "DEU")
# Chunk 25
parlgov_elec_de %>% # add, e.g., _de if we want to keep our original df
filter(party_name_short == "SPD", election_type == "parliament") %>%
pull(vote_share) %>%
mean()
# Chunk 26
parlgov_elec_de %>%
filter(party_name_short == "SPD", election_type == "parliament") %>%
summarise(mean(vote_share)) # summarise() takes summary functions such as mean(), sd(), etc.
# Chunk 27
parlgov_elec_de %>%
filter(party_name_short == "SPD", election_type == "parliament") %>%
summarise(mean = mean(vote_share), sd = sd(vote_share), n = n())
# Aside: you can also get the number of rows (in a group) by usining the base
# function nrow(.) with a placeholder in the above pipe.
# Chunk 28
parlgov_elec_de <- parlgov_elec_de %>% # here, we "overwrite" our df
mutate(year = lubridate::year(election_date))
# Chunk 29
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
arrange(desc(left_right)) #default is ascending; we can wrap the masked vector with desc() to sort descending
parlgov_elec %>%
group_by(country_name_short) %>%
summarize(left_right) # note the "collapsing" I meantioned earlier
parlgov_elec %>%
group_by(country_name_short) %>%
summarize(mean(left_right)) # note the "collapsing" I meantioned earlier
parlgov_elec %>%
group_by(country_name_short) %>%
summarize(mean(left_right, na.rm = T)) # n
parlgov_elec %>%
group_by(country_name_short) %>%
summarize(mean(left_right, na.rm = T)) %>%  # note the "collapsing" I mentioned earlier
arrange(left_right)
parlgov_elec %>%
group_by(country_name_short) %>%
summarize(mean_lr = mean(left_right, na.rm = T)) %>%  # note the "collapsing" I mentioned earlier
arrange(mean_lr)
parlgov_elec %>%
group_by(country_name_short) %>%
summarize(mean_lr = mean(left_right, na.rm = T)) %>%  # note the "collapsing" I mentioned earlier
arrange(desc(mean_lr))
parlgov_elec %>%
group_by(country_name_short) %>%
summarize(mean_lr = mean(left_right, na.rm = T)) %>%  # note the "collapsing" I mentioned earlier
arrange(mean_lr)
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_max = max(left_right) ) %>%  # note the "collapsing" I mentioned earlier
arrange(left_right_max)
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_max = max(left_right, na.rm = T)) %>%  # note the "collapsing" I mentioned earlier
arrange(left_right_max)
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(party = party_name_short, left_right_max = max(left_right, na.rm = T)) %>%  # note the "collapsing" I mentioned earlier
arrange(left_right_max)
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_max = max(left_right, na.rm = T),
party = party_name_english[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(left_right_max)
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_max = max(left_right, na.rm = T),
party = party_name_english[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(desc(left_right_max))
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_max = max(left_right, na.rm = T),
party = party_name_english[1],
election_date = election_date[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(desc(left_right_max))
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_max = min(left_right, na.rm = T),
party = party_name_english[1],
election_date = election_date[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(desc(left_right_max))
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_max = min(left_right, na.rm = T),
party = party_name_english[1],
election_date = election_date[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(left_right_max)
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
arrange(desc(left_right))
parlgov_elec %>%
group_by(country_name_short) %>%
summarise(left_right_min = min(left_right, na.rm = T),
party = party_name_english[1],
election_date = election_date[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(left_right_min)
parlgov_elec %>%
filter(election_type == "parliament") %>%
group_by(country_name_short) %>%
summarise(share_max = max(vote_share, na.rm = T),
party = party_name_english[1],
election_date = election_date[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(share_max)
parlgov_elec %>%
filter(election_type == "parliament") %>%
group_by(country_name_short) %>%
summarise(share_max = max(vote_share, na.rm = T),
party = party_name_english[1],
election_date = election_date[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(desc(share_max))
parlgov_elec <- parlgov_elec %>%
group_by(country_id, year(election_date)) %>%
mutate(cy_avg_lr = mean(left_right, na.rm = T))
head(parlgov_elec)
datasummary_skim(c(parlgov_elec$`year(election_date)`))
head(parlgov_elec, 5:6)
head(parlgov_elec, 5,6)
?head
head(parlgov_elec[,6])
head(parlgov_elec[,6:13])
tail(parlgov_elec)
tail(parlgov_elec[,15:17])
ncol(parlgov_elec)
tail(parlgov_elec[,15:18])
tail(parlgov_elec[,15:ncol(parlgov_elec)])
parlgov_elec <- parlgov_elec %>%
group_by(country_id, year = year(election_date)) %>%
mutate(cy_avg_lr = mean(left_right, na.rm = T))
tail(parlgov_elec[,15:ncol(parlgov_elec)])
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
fig.align = "center",
fig.retina = 2,
cache = FALSE # , echo=F, warning=F, message=F
)
# knitr::opts_chunk$set(fig.dim=c(4.8, 4.5), fig.retina=2, out.width="100%")
# install package management tool pacman
# install.packages("pacman")
# devtools::install_github("CorrelAid/datenguideR")
pacman::p_load(
tidyverse,
data.table,
rio,
patchwork,
DT,
modelsummary,
collapse
)
# font_add_google(
#   name = "IBM Plex Sans",
#   family = "plex"
# )
# showtext_auto()
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE
)
# Chunk 2: set-ggplot-theme
theme_set(theme_classic() +
theme(
text = element_text(family = "plex", size = 25, colour = "#415564"),
panel.background = element_rect(fill = "#f6f3f2"),
plot.background = element_rect(fill = "#f6f3f2", color = "#f6f3f2"),
panel.grid.major = element_line(colour = "#e8e8e8"),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill = "#f6f3f2"),
legend.box.background = element_rect(fill = "#f6f3f2"),
axis.text = element_text(colour = "#415564"),
axis.line = element_line(colour = "#415564"),
axis.title = element_text(colour = "#415564"),
axis.ticks = element_line(colour = "#415564"),
))
purple <- "#644155"
# Chunk 3: xaringan-scribble
xaringanExtra::use_scribble(pen_color = purple)
# Chunk 4
knitr::include_graphics("Figs/tidyverse.png")
# Chunk 5
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr
# Chunk 6
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
as.data.frame(lotr)
# Chunk 7
as_tibble(lotr) # You don't have the data here.
# Hint: You can create one just like data frames but with tibble().
# Chunk 10
# Exporting/importing several data frames: export_list()/import_list()
# Make a list of two built-in data sets.
# tibble::lst() automatically names the elements:
df_list <- tibble::lst(mtcars, iris)
export_list(df_list, file = paste0(names(df_list), ".csv"))
# export_file takes a character vector; hence, we build one from the names of our element
# With the paste0() we paste ".csv" to every element of the character vector
# produced by names(df_list).
Z <- import_list(dir(pattern = "csv$"))
# import_file takes achr vector holding file paths/files.
# With dir() we get all names of the files that match a specific pattern (regular expression).
# In this case, all files that end with csv ($ matches the end of the string).[1]
# Chunk 12
"Ceci n&#37;est pas une pipe" %>% gsub("&#37;", "'", .) # gsub() performs replacement of all matches in a chr. vector.
# Chunk 14
Sys.setenv("_R_USE_PIPEBIND_" = "true")
"Ceci n&#37;est pas une pipe" |> . => gsub("&#37;", "'", .)
# Chunk 15
knitr::include_graphics("Figs/relational.svg")
# Chunk 16
parlgov_elec <- import("http://www.parlgov.org/static/data/development-cp1252/view_election.csv")
# Chunk 17
glimpse(parlgov_elec) # enhanced version of str()
# Chunk 18
datatable(head(parlgov_elec, 10),
width = "100%",
options = list(pageLength = 3, scrollX = TRUE)
)
# Chunk 20
datasummary_skim(parlgov_elec) %>% kableExtra::kable_styling(font_size = 17)
# Chunk 21
knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/master/rstats-artwork/dplyr_wrangling.png")
# Chunk 23
parlgov_elec_de <- parlgov_elec %>% # add, e.g., _de if we want to keep our original df
filter(country_name_short == "DEU")
# Chunk 25
parlgov_elec_de %>% # add, e.g., _de if we want to keep our original df
filter(party_name_short == "SPD", election_type == "parliament") %>%
pull(vote_share) %>%
mean()
# Chunk 26
parlgov_elec_de %>%
filter(party_name_short == "SPD", election_type == "parliament") %>%
summarise(mean(vote_share)) # summarise() takes summary functions such as mean(), sd(), etc.
# Chunk 27
parlgov_elec_de %>%
filter(party_name_short == "SPD", election_type == "parliament") %>%
summarise(mean = mean(vote_share), sd = sd(vote_share), n = n())
# Aside: you can also get the number of rows (in a group) by usining the base
# function nrow(.) with a placeholder in the above pipe.
# Chunk 28
parlgov_elec_de <- parlgov_elec_de %>% # here, we "overwrite" our df
mutate(year = lubridate::year(election_date))
# Chunk 29
parlgov_elec_de %>%
filter(year == 2017) %>%
select(party_name_short, vote_share, left_right) %>%
arrange(desc(left_right)) #default is ascending; we can wrap the masked vector with desc() to sort descending
# Chunk 30
parlgov_elec %>%
filter(election_type == "parliament") %>%
group_by(country_name_short) %>%
summarise(share_max = max(vote_share, na.rm = T),
party = party_name_english[1],
election_date = election_date[1]
) %>%  # note the "collapsing" I mentioned earlier
arrange(desc(share_max))
parlgov_elec <- parlgov_elec %>%
group_by(country_id, year = year(election_date)) %>%
mutate(cy_avg_lr = mean(left_right, na.rm = T))
tail(parlgov_elec[,15:ncol(parlgov_elec)])
glimpse(parlgov_elec[,15:ncol(parlgov_elec)])
glimpse(parlgov_elec[, c(1,2,3)])
head(parlgov_elec[, c(1,ncol()-1)])
parlgov_elec |>
head()
parlgov_elec |>
[, c(1,ncol()-1)] |>
head()
parlgov_ele[, c(1,ncol()-1)] |>
head()
parlgov_elec[, c(1,ncol(parlgov_elec)-1)] |>
head()
parlgov_elec[, c(1,ncol(parlgov_elec)-1), ncol(parlgov_elec)] |>
head()
parlgov_elec[, c(1, ncol(parlgov_elec)-1, ncol(parlgov_elec)] |>
head()
parlgov_elec[, c(1, ncol(parlgov_elec)-1, ncol(parlgov_elec))] |>
head()
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
head()
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
head(,10)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
head(10)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
head(30)
View(parlgov_elec)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
tail()
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
tail(10)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
glimpse()
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr)
?sample
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample(6)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample_n(6)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample_n(.,6)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample_n(4)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample_n(3)
parlgov_elec <- parlgov_elec %>%
group_by(country_id, year = year(election_date)) %>%
mutate(cy_avg_lr = mean(left_right, na.rm = T)) %>%
ungroup()
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample_n(3)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample_n(3)
parlgov_elec %>%
select(country_name_short, year, cy_avg_lr) %>%
sample_n(6)
